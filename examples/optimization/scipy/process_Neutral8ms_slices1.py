{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import time series from SOWFA slices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load modules\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import os\n",
    "import time\n",
    "import imp\n",
    "#from wind_tools.slices import readVTK as slc\n",
    "import pickle\n",
    "from scipy import signal\n",
    "from scipy.io import loadmat\n",
    "from datetime import datetime,timedelta\n",
    "from wind_tools import geometry as geo\n",
    "from scipy.optimize import minimize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using matplotlib backend: MacOSX\n"
     ]
    }
   ],
   "source": [
    "%matplotlib "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "sowfa_base_dir = 'Neutral_8ms_Slices/sliceDataInstantaneous'\n",
    "M5_10min_base_dir = 'M5_10min_files'\n",
    "M5_20Hz_base_dir = 'M5_20Hz_files'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "folderList = os.listdir(sowfa_base_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "folderList = [folderList[i] for i in range(len(folderList)) if folderList[i][0] == '2']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "z = 95.\n",
    "ys = [i for i in range(95,2000,50)]\n",
    "\n",
    "vels = np.zeros((len(folderList),len(ys),2))\n",
    "\n",
    "for index, folderName in enumerate(folderList):\n",
    "    if (index % 100) == 0:\n",
    "        print(index)\n",
    "    dataType, cellCenters, cellData, pointsXYZ = slc.readVTK(os.path.join(sowfa_base_dir,folderName,'U_slice_streamwise_1.vtk'))\n",
    "    inds = [i for i in range(cellCenters.shape[0]) if (cellCenters[i,1] in ys) and (cellCenters[i,2] == z)]\n",
    "    vels[index,:,:] = cellData[inds,0:2]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.dump([vels,ys,z],open('vels_Neutral8ms_z95.p','wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "vels,ys,z = pickle.load(open('vels_Neutral8ms_z95.p','rb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plt.figure()\n",
    "#plt.plot(pointsXYZ[72,:])\n",
    "# print(vels.shape[0])\n",
    "\n",
    "i = 0\n",
    "plt.plot(vels[:,i,0])\n",
    "plt.plot(vels[:,i,1])\n",
    "\n",
    "wdirs = np.zeros((vels.shape[0],vels.shape[1]))\n",
    "wspds = np.zeros((vels.shape[0],vels.shape[1]))\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "for i in range(vels.shape[1]):\n",
    "    wdirs[:,i] = (180/np.pi)*np.arctan(-1*vels[:,i,1]/vels[:,i,0])\n",
    "    wspds[:,i] = vels[:,i,0]\n",
    "    plt.plot(vels[:,i,0])\n",
    "    \n",
    "# plt.figure()\n",
    "# plt.plot(wdirs[:,0])\n",
    "\n",
    "spec_len = 4*1028\n",
    "Pxx_avg_sowfa = np.zeros(int(spec_len/2+1))\n",
    "Puu_avg_sowfa = np.zeros(int(spec_len/2+1))\n",
    "\n",
    "for i in range(wdirs.shape[1]):\n",
    "    f, Pxx = signal.welch((wdirs[:,i] - np.mean(wdirs[:,i])), 1, nperseg=spec_len)\n",
    "    Pxx_avg_sowfa = Pxx_avg_sowfa+Pxx/wdirs.shape[1]\n",
    "    \n",
    "    f, Puu = signal.welch((vels[:,i,0] - np.mean(vels[:,i,0])), 1, nperseg=spec_len)\n",
    "    Puu_avg_sowfa = Puu_avg_sowfa+Puu/vels.shape[1]\n",
    "\n",
    "f_sowfa = f*2.5\n",
    "    \n",
    "# plt.figure()\n",
    "# plt.loglog(f_sowfa, Pxx_avg_sowfa)\n",
    "# plt.grid()\n",
    "\n",
    "# plt.figure()\n",
    "# plt.loglog(f_sowfa, Puu_avg_sowfa)\n",
    "# plt.grid()\n",
    "\n",
    "#ind = [i for i in range(pointsXYZ.shape[0]) if (pointsXYZ[i,2] == 90.) and (pointsXYZ[i,1] == 500.)]\n",
    "#print(ind)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.928823657883031\n",
      "0.10707924938623618\n",
      "8.072586970379055\n"
     ]
    }
   ],
   "source": [
    "print(np.std(wdirs))\n",
    "print(np.std(wspds)/np.mean(wspds))\n",
    "print(np.mean(wspds))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load M5 10-minute file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "thrsh_ntrl = 0.05\n",
    "thrsh_seq = 6 # to get 1-hour of continuous neutral conditions\n",
    "\n",
    "fileList = os.listdir(M5_10min_base_dir)\n",
    "\n",
    "#periods_neutral = pd.Series([])\n",
    "periods_neutral = pd.DataFrame(columns=['Speed (cup_ 87 m)', 'Ti (cup_ 87 m)', 'Direction (Vane_ 87 m)'])\n",
    "\n",
    "for index, fileName in enumerate(fileList):\n",
    "    print(fileName)\n",
    "    \n",
    "    df = pd.read_csv(os.path.join(M5_10min_base_dir,fileName),skiprows=lambda x: x in [0, 1, 2, 3, 4, 5, 6, 8, 9])\n",
    "    df.set_index('Date',inplace=True)\n",
    "    df.index = pd.to_datetime(df.index,format='%d-%m-%Y %H:%M:%S')\n",
    "    df['Neutral'] = np.abs(15.0/df['Monin-Obukhov Length (15m)']) < thrsh_ntrl\n",
    "    \n",
    "    # additional filtering\n",
    "    #df['Neutral'] = df['Neutral'] & (df['Direction (Vane_ 87 m)'] >= 200) & (df['Direction (Vane_ 87 m)'] <= 360)\n",
    "    #df['Neutral'] = df['Neutral'] & (df['Speed (cup_ 87 m)'] >= 6)\n",
    "    #df['Neutral'] = df['Neutral'] & (df['Speed (cup_ 87 m)'] <= 11)\n",
    "    #df['Neutral'] = df['Neutral'] & (df['Ti (cup_ 87 m)'] <= 20)\n",
    "    \n",
    "    wd_rolling_mean = (180/np.pi)*np.arctan2(np.sin((np.pi/180)*df['Direction (Vane_ 87 m)']).rolling(thrsh_seq).mean(),np.cos((np.pi/180)*df['Direction (Vane_ 87 m)']).rolling(thrsh_seq).mean())\n",
    "    wd_rolling_mean[wd_rolling_mean < 0] = wd_rolling_mean[wd_rolling_mean < 0] + 360\n",
    "    flag_wd = (wd_rolling_mean >= 200) & (wd_rolling_mean < 360)\n",
    "    for i in np.arange(thrsh_seq-1):\n",
    "        flag_wd = flag_wd | flag_wd.shift(-1)\n",
    "        \n",
    "    flag_ws = ((1.*df['Speed (cup_ 87 m)']).rolling(thrsh_seq).mean() >= 7.5) & ((1.*df['Speed (cup_ 87 m)']).rolling(thrsh_seq).mean() < 8.5)\n",
    "    for i in np.arange(thrsh_seq-1):\n",
    "        flag_ws = flag_ws | flag_ws.shift(-1)\n",
    "    \n",
    "    flag_ti = ((1.*df['Ti (cup_ 87 m)']).rolling(thrsh_seq).mean() >= 0) & ((1.*df['Ti (cup_ 87 m)']).rolling(thrsh_seq).mean() < 20)\n",
    "    for i in np.arange(thrsh_seq-1):\n",
    "        flag_ti = flag_ti | flag_ti.shift(-1)\n",
    "    \n",
    "    #find periods where there is 1 hour with neutral conditions\n",
    "    flag_ntrl = ((1.*df['Neutral']).rolling(thrsh_seq).sum() == thrsh_seq)\n",
    "    for i in np.arange(thrsh_seq-1):\n",
    "        flag_ntrl = flag_ntrl | flag_ntrl.shift(-1)\n",
    "        \n",
    "    # periods_neutral = periods_neutral.append(pd.Series(df.index[flag_ntrl]))\n",
    "    #periods_neutral = periods_neutral.append(df['Speed (cup_ 87 m)'][flag_ntrl])\n",
    "    periods_neutral = pd.concat([periods_neutral, df[['Speed (cup_ 87 m)', 'Ti (cup_ 87 m)', 'Direction (Vane_ 87 m)']][flag_ntrl & flag_wd & flag_ws & flag_ti]])\n",
    "    \n",
    "periods_neutral.sort_index(inplace=True)\n",
    "flag_tm = pd.Series(np.insert(np.diff(periods_neutral.index).astype(int),0,0)).rolling(thrsh_seq).mean() == 6.000000e+11\n",
    "for i in np.arange(thrsh_seq-1):\n",
    "    flag_tm = flag_tm | flag_tm.shift(-1)\n",
    "\n",
    "flag_tm.index = periods_neutral.index\n",
    "periods_neutral = periods_neutral[flag_tm]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.plot(df['Monin-Obukhov Length (15m)'])\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plt.figure()\n",
    "#plt.plot(df['Direction (Vane_ 87 m)'])\n",
    "#plt.plot(wd_rolling_mean)\n",
    "print(df.columns.values)\n",
    "#print(periods_neutral)\n",
    "#print(periods_neutral.sort_index(inplace=True))\n",
    "\n",
    "# pd.Series(np.diff(df.index).astype(int)).rolling(thrsh_seq).mean() == thrsh_seq\n",
    "\n",
    "#df['Speed (cup_ 87 m)'].rolling(thrsh_seq).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#periods_neutral.sort_index(inplace=True)\n",
    "print(periods_neutral.iloc[50:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load M5 20 Hz files for select 1-hour periods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    }
   ],
   "source": [
    "# list of times indicating start of 1-hour period\n",
    "#file_list = ['2017-12-08 15:30:00','2018-01-21 22:10:00','2018-01-22 20:10:00','2018-02-11 12:20:00','2018-03-25 23:10:00','2018-05-28 05:50:00','2018-05-28 06:40:00','2018-06-18 00:00:00','2018-06-20 01:00:00','2018-07-17 07:20:00','2018-08-01 23:00:00'] # old list\n",
    "file_list = ['2017-12-08 15:40:00','2018-01-10 20:00:00','2018-01-13 21:20:00','2018-02-11 12:20:00','2018-03-28 21:30:00','2018-05-03 13:30:00','2018-05-11 04:40:00','2018-05-28 07:30:00','2018-06-18 00:30:00','2018-06-20 01:20:00','2018-10-26 22:30:00','2018-10-27 22:30:00'] # new list (11/26/2018)\n",
    "print(len(file_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2017-12-08 15:40:00\n",
      "2018-01-10 20:00:00\n",
      "2018-01-13 21:20:00\n",
      "Saving wind direction time series\n",
      "2018-02-11 12:20:00\n",
      "2018-03-28 21:30:00\n",
      "2018-05-03 13:30:00\n",
      "2018-05-11 04:40:00\n",
      "2018-05-28 07:30:00\n",
      "2018-06-18 00:30:00\n",
      "2018-06-20 01:20:00\n",
      "Saving wind speed time series\n",
      "2018-10-26 22:30:00\n",
      "2018-10-27 22:30:00\n",
      "0.14255875491196168\n",
      "10.367036489750507\n",
      "10.923886850089682\n",
      "1.4831152130013083\n",
      "1.5258161655780804\n",
      "8.108392008051077\n"
     ]
    }
   ],
   "source": [
    "col_names = ['Vane_WD_87m','Cup_WS_87m']\n",
    "\n",
    "spec_len = 3*1028\n",
    "Pxx_avg_m5 = np.zeros(int(spec_len/2+1))\n",
    "Puu_avg_m5 = np.zeros(int(spec_len/2+1))\n",
    "\n",
    "# plt.figure()\n",
    "\n",
    "pwr_avg = 0.\n",
    "upwr_avg = 0.\n",
    "\n",
    "wd_std_avg = 0.\n",
    "ws_std_avg = 0.\n",
    "ws_mean_avg = 0.\n",
    "\n",
    "wd_var_avg = 0.\n",
    "ws_var_avg = 0.\n",
    "\n",
    "ti_avg = 0.\n",
    "\n",
    "for i in range(len(file_list)):\n",
    "    \n",
    "    print(file_list[i])\n",
    "    dttm_st = datetime.strptime(file_list[i],'%Y-%m-%d %H:%M:%S')\n",
    "    \n",
    "    # add on 10-minutes each time to get 1-hour of data\n",
    "    for k in range(6):\n",
    "        data20Hz = loadmat(os.path.join(M5_20Hz_base_dir,(dttm_st + timedelta(minutes=k*10)).strftime('%m_%d_%Y_%H_%M_%S_000.mat')))\n",
    "        \n",
    "        time_UTC = pd.Series(np.zeros(len(data20Hz['time_UTC'][0][0][0][0])))\n",
    "\n",
    "        for m in range(len(data20Hz['time_UTC'][0][0][0][0])):\n",
    "            time_UTC[m] = pd.to_datetime(datetime.fromordinal(int(data20Hz['time_UTC'][0][0][0][0][m])) + timedelta(days=data20Hz['time_UTC'][0][0][0][0][m]%1) - timedelta(days = 366))\n",
    "            \n",
    "        df = pd.DataFrame({'Vane_WD_87m':data20Hz['Vane_WD_87m'][0][0][0][:,0],'Cup_WS_87m':data20Hz['Cup_WS_87m'][0][0][0][:,0]},index=time_UTC,columns=col_names)\n",
    "        \n",
    "        try:          \n",
    "            df1hr = pd.concat([df1hr, df])\n",
    "        except:\n",
    "            df1hr = df\n",
    "    \n",
    "    df1hr = df1hr.resample('1S').first()\n",
    "    \n",
    "    # calculate 10-min TI\n",
    "    for k in range(6):\n",
    "        ti_avg = ti_avg + df1hr.Cup_WS_87m.iloc[k*600:(k+1)*600].std()/df1hr.Cup_WS_87m.iloc[k*600:(k+1)*600].mean()\n",
    "    \n",
    "    wd_unwrp = (180/np.pi)*np.unwrap((np.pi/180)*df1hr.Vane_WD_87m)\n",
    "    \n",
    "    #print(np.std(wd_unwrp))\n",
    "    \n",
    "    wd_std_avg = wd_std_avg + np.std(wd_unwrp)/len(file_list)\n",
    "    ws_std_avg = ws_std_avg + np.std(df1hr.Cup_WS_87m)/len(file_list)\n",
    "    ws_mean_avg = ws_mean_avg + np.mean(df1hr.Cup_WS_87m)/len(file_list)\n",
    "    \n",
    "    wd_var_avg = wd_var_avg + np.var(wd_unwrp)/len(file_list)\n",
    "    ws_var_avg = ws_var_avg + np.var(df1hr.Cup_WS_87m)/len(file_list)\n",
    "    \n",
    "    f_m5, Pxx = signal.welch((wd_unwrp - np.mean(wd_unwrp)), 1, nperseg=spec_len)\n",
    "    pwr_avg = pwr_avg + np.sum(Pxx)/len(file_list)\n",
    "    Pxx = Pxx/np.sum(Pxx)\n",
    "    Pxx_avg_m5 = Pxx_avg_m5+Pxx/len(file_list)\n",
    "    \n",
    "    f_m5, Puu = signal.welch((df1hr.Cup_WS_87m - np.mean(df1hr.Cup_WS_87m)), 1, nperseg=spec_len)\n",
    "    upwr_avg = upwr_avg + np.sum(Puu)/len(file_list)\n",
    "    Puu = Puu/np.sum(Puu)\n",
    "    Puu_avg_m5 = Puu_avg_m5+Puu/len(file_list)\n",
    "    \n",
    "#     plt.figure()\n",
    "#     plt.subplot(211)\n",
    "#     plt.loglog(f_m5, Pxx)\n",
    "#     plt.subplot(212)\n",
    "#     plt.plot(wd_unwrp-np.mean(wd_unwrp))\n",
    "\n",
    "#     plt.figure()\n",
    "#     plt.subplot(211)\n",
    "#     plt.loglog(f_m5, Puu)\n",
    "#     plt.subplot(212)\n",
    "#     plt.plot(df1hr.Cup_WS_87m - np.mean(df1hr.Cup_WS_87m))\n",
    "\n",
    "    if i == 2:\n",
    "        print('Saving wind direction time series')\n",
    "        wd_example = wd_unwrp\n",
    "        \n",
    "    if i == 9:\n",
    "        print('Saving wind speed time series')\n",
    "        ws_example = df1hr.Cup_WS_87m\n",
    "    \n",
    "#     plt.plot(df1hr.Vane_WD_87m.values)\n",
    "#     plt.plot(df1hr.Cup_WS_87m.values-np.mean(df1hr.Cup_WS_87m.values))\n",
    "    dft = df1hr\n",
    "    del df1hr\n",
    "\n",
    "ti_avg = ti_avg/(6*len(file_list))\n",
    "print(ti_avg)\n",
    "    \n",
    "# plt.figure()\n",
    "# plt.loglog(f_m5, 1.3*pwr_avg*Pxx_avg_m5)\n",
    "# plt.loglog(f_sowfa, Pxx_avg_sowfa)\n",
    "# plt.grid()\n",
    "\n",
    "# plt.figure()\n",
    "# plt.loglog(f_m5, 1.3*upwr_avg*Puu_avg_m5)\n",
    "# plt.loglog(f_sowfa, Puu_avg_sowfa)\n",
    "# plt.grid()\n",
    "\n",
    "print(wd_std_avg)\n",
    "print(np.sqrt(wd_var_avg))\n",
    "print(ws_std_avg)\n",
    "print(np.sqrt(ws_var_avg))\n",
    "print(ws_mean_avg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## plot example time series from simulation and field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# plt.figure()\n",
    "# plt.plot(vels[:,0,0])\n",
    "\n",
    "print(wdirs.shape)\n",
    "print(wd_example.shape)\n",
    "\n",
    "wd_std_total = 10.92\n",
    "ws_std_total = 1.53\n",
    "\n",
    "### Plots for WES Paper\n",
    "fig = plt.figure(figsize=(6.4,5.5))\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "plt.subplot(211)\n",
    "plt.plot(np.arange(0,wdirs.shape[0])*860/(wdirs.shape[0]-1),(wd_fixed_comb_std_ratio*wd_std_total/np.std(wdirs[:,0]))*(wdirs[:,0]-np.mean(wdirs[:,0])),label='Wind Direction from LES (limited to 860 s)')\n",
    "plt.grid()\n",
    "plt.xlim((0,3600))\n",
    "plt.ylim((-45,45))\n",
    "plt.ylabel('Wind Direction ($^\\circ$)')\n",
    "plt.legend(loc='upper left')\n",
    "plt.subplot(212)\n",
    "plt.plot(np.arange(0,len(wd_example))*3600/(len(wd_example)-1),(wd_std_total/np.std(wd_example))*(wd_example-np.mean(wd_example)),label='Wind Direction from Met Mast')\n",
    "# plt.plot(np.arange(0,861),(wd_std/np.std(wd_example))*(wd_example[0:861]-np.mean(wd_example))-(wd_fixed_comb_std_ratio*wd_std/np.std(wdirs[:,0]))*(wdirs[0:4301:5,0]-np.mean(wdirs[:,0])))\n",
    "plt.grid()\n",
    "plt.xlim((0,3600))\n",
    "plt.ylim((-45,45))\n",
    "plt.xlabel('Time (s)')\n",
    "plt.ylabel('Wind Direction ($^\\circ$)')\n",
    "plt.legend(loc='upper left')\n",
    "\n",
    "fig.savefig('/Users/esimley/Documents/Documentation/Papers/WES_WakeSteeringUncertainty/wd_timeseries_met_les_example.pdf', bbox_inches='tight')\n",
    "\n",
    "fig = plt.figure(figsize=(6.4,5.5))\n",
    "plt.rcParams.update({'font.size': 12})\n",
    "plt.subplot(211)\n",
    "plt.plot(np.arange(0,vels.shape[0])*860/(vels.shape[0]-1),(ws_fixed_comb_std_ratio*ws_std_total/np.std(vels[:,0,0]))*(vels[:,0,0]-np.mean(vels[:,0,0]))+8,label='Wind Speed from LES (limited to 860 s)')\n",
    "plt.grid()\n",
    "plt.xlim((0,3600))\n",
    "plt.ylim((8-6,8+6))\n",
    "plt.ylabel('Wind Speed (m/s)')\n",
    "plt.legend(loc='upper left')\n",
    "plt.subplot(212)\n",
    "plt.plot(np.arange(0,len(ws_example))*3600/(len(ws_example)-1),(ws_std_total/np.std(ws_example))*(ws_example-np.mean(ws_example))+8,label='Wind Speed from Met Mast')\n",
    "# plt.plot(np.arange(0,861),(wd_std/np.std(wd_example))*(wd_example[0:861]-np.mean(wd_example))-(wd_fixed_comb_std_ratio*wd_std/np.std(wdirs[:,0]))*(wdirs[0:4301:5,0]-np.mean(wdirs[:,0])))\n",
    "plt.grid()\n",
    "plt.xlim((0,3600))\n",
    "plt.ylim((8-6,8+6))\n",
    "plt.xlabel('Time (s)')\n",
    "plt.ylabel('Wind Speed (m/s)')\n",
    "plt.legend(loc='upper left')\n",
    "\n",
    "fig.savefig('/Users/esimley/Documents/Documentation/Papers/WES_WakeSteeringUncertainty/ws_timeseries_met_les_example.pdf', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(ws_std_avg)\n",
    "# plt.figure()\n",
    "# plt.loglog(f_m5, 1.4*upwr_avg*Puu_avg_m5)\n",
    "# plt.loglog(f_sowfa, Puu_avg_sowfa)\n",
    "# # c = 400\n",
    "# # K = 0.036247644*(1+c)**(5/3)\n",
    "# # plt.loglog(f_m5,K/(1+c*f_m5)**(5/3),color='k')\n",
    "# c = 450\n",
    "# K = 0.036247644*(1+c)**(5/3)\n",
    "# plt.loglog(f_m5,K/(1+c*f_m5)**(5/3),color='k')\n",
    "# c = 200\n",
    "# K = 0.036247644*(1+c)**(5/3)\n",
    "# plt.loglog(f_m5,K/(1+c*f_m5)**(5/3),color='r')\n",
    "# plt.grid()\n",
    "\n",
    "print(ws_std_avg)\n",
    "plt.figure()\n",
    "plt.semilogx(f_m5, f_m5*1.4*upwr_avg*Puu_avg_m5)\n",
    "plt.semilogx(f_sowfa, f_sowfa*Puu_avg_sowfa)\n",
    "c = 150 #350\n",
    "alpha = 0.67\n",
    "# K = 0.036247644*(1+c)**(5/3)\n",
    "K = 0.036247644*(1+c)**(5/3 - alpha)\n",
    "plt.semilogx(f_m5,f_m5*1*((f_m5)**-alpha)*K/(1+c*f_m5)**(5/3 - alpha),color='y')\n",
    "c = 200\n",
    "K = 0.036247644*(1+c)**(5/3)\n",
    "plt.semilogx(f_m5,f_m5*K/(1+c*f_m5)**(5/3),color='r')\n",
    "plt.grid()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.000277623542476402\n",
      "0.5\n",
      "29066.20842159974\n",
      "17965.787866329494\n",
      "0.7861925823985573\n",
      "1.0000000000000004\n"
     ]
    }
   ],
   "source": [
    "def wd_psd(f):\n",
    "    #return 180000/(1+(f/.00006))**(1)\n",
    "    return 1./f\n",
    "\n",
    "def wd_fixed_psd(f):\n",
    "    return 39576*(f**0.55)/(1+(f/0.005)**2)**(1.55/2)\n",
    "\n",
    "def wd_fixed_psd2(f):\n",
    "    return 67226*(f**0.65)/(1+(f/0.005)**2)**(1.65/2)\n",
    "\n",
    "def wd_fixed_psd3(f):\n",
    "    return 6262*(f**0.65)/(1+(f/0.005)**3)**(1.65/3)\n",
    "\n",
    "def wd_lowfreq_psd(f):\n",
    "    return wd_psd(f)-wd_fixed_psd3(f)\n",
    "\n",
    "# plt.figure()\n",
    "# plt.loglog(f_m5, 1.3*pwr_avg*Pxx_avg_m5)\n",
    "# plt.loglog(f_sowfa, Pxx_avg_sowfa)\n",
    "# plt.grid()\n",
    "# f_f = np.linspace(.0001,.5,100000)\n",
    "# plt.plot(f_f,10.736*wd_psd(f_f),'k')\n",
    "# #plt.plot(f_f,wd_fixed_psd(f_f),'r')\n",
    "# plt.plot(f_f,10.736*wd_fixed_psd3(f_f),'r')\n",
    "# plt.plot(f_f,10.736*(wd_psd(f_f)-wd_fixed_psd3(f_f)),'c')\n",
    "\n",
    "f_f = np.linspace(1,1801,1800)*.5/1801\n",
    "\n",
    "print(f_f[0])\n",
    "print(f_f[len(f_f)-1])\n",
    "\n",
    "print(np.sum(wd_psd(f_f)))\n",
    "print(np.sum(wd_fixed_psd3(f_f)))\n",
    "\n",
    "print(np.sqrt(np.sum(wd_fixed_psd3(f_f))/np.sum(wd_psd(f_f))))\n",
    "wd_fixed_comb_std_ratio = np.sqrt(np.sum(wd_fixed_psd3(f_f))/np.sum(wd_psd(f_f)))\n",
    "\n",
    "norm_const = 1/sum(f_f[0]*10.736*wd_psd(f_f))\n",
    "\n",
    "# Plot for WES Paper\n",
    "fig = plt.figure(figsize=(2*6.4,5))\n",
    "plt.rcParams.update({'font.size': 11.054})\n",
    "fig.subplots_adjust(hspace=0.275, wspace=0.275)\n",
    "plt.subplot(122)\n",
    "plt.semilogx(f_m5[1:], f_m5[1:]*norm_const*.8*pwr_avg*Pxx_avg_m5[1:],label='Met Mast', linewidth=1.75)\n",
    "plt.semilogx(f_sowfa[1:], f_sowfa[1:]*norm_const*Pxx_avg_sowfa[1:],color='#2ca02c',label='LES', linewidth=1.75)\n",
    "plt.grid()\n",
    "# f_f = np.linspace(.0001,.5,100000)\n",
    "plt.semilogx(f_f,f_f*norm_const*10.736*wd_psd(f_f),'k',label='Model Fit, Combined', linewidth=2)\n",
    "#plt.plot(f_f,wd_fixed_psd(f_f),'r')\n",
    "plt.semilogx(f_f,f_f*norm_const*10.736*wd_fixed_psd3(f_f),color=(0.65,0.65,0.65),label='Model Fit, Turbulent', linewidth=2)\n",
    "plt.semilogx(f_f,f_f*norm_const*10.736*(wd_psd(f_f)-wd_fixed_psd3(f_f)),'r',label='Model Fit, Low Frequency', linewidth=2)\n",
    "plt.xlim((f_f[0],0.5))\n",
    "plt.ylim((0,0.25))\n",
    "plt.xlabel('Frequency (Hz)')\n",
    "plt.ylabel('$f \\cdot S_{\\phi}(f)$')\n",
    "plt.legend(loc='upper left')\n",
    "\n",
    "plt.subplot(121)\n",
    "# plt.figure()\n",
    "plt.loglog(f_m5[1:], norm_const*.8*pwr_avg*Pxx_avg_m5[1:],label='Met Mast', linewidth=1.75)\n",
    "plt.loglog(f_sowfa[1:], norm_const*Pxx_avg_sowfa[1:],color='#2ca02c',label='LES', linewidth=1.75)\n",
    "plt.grid()\n",
    "# f_f = np.linspace(.0001,.5,100000)\n",
    "plt.loglog(f_f,norm_const*10.736*wd_psd(f_f),'k',label='Model Fit, Combined', linewidth=2)\n",
    "#plt.plot(f_f,wd_fixed_psd(f_f),'r')\n",
    "plt.loglog(f_f,norm_const*10.736*wd_fixed_psd3(f_f),color=(0.65,0.65,0.65),label='Model Fit, Turbulent', linewidth=2)\n",
    "plt.loglog(f_f,norm_const*10.736*(wd_psd(f_f)-wd_fixed_psd3(f_f)),'r',label='Model Fit, Low Frequency', linewidth=2)\n",
    "plt.xlim((f_f[0],0.5))\n",
    "plt.ylim((1e-2,1e3))\n",
    "plt.xlabel('Frequency (Hz)')\n",
    "plt.ylabel('$S_{\\phi}(f)$')\n",
    "plt.legend(loc='upper right')\n",
    "\n",
    "print(sum(norm_const*f_f[0]*10.736*wd_psd(f_f)))\n",
    "\n",
    "fig.savefig('/Users/esimley/Documents/Documentation/Papers/WES_WakeSteeringUncertainty/wd_spectra.pdf', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# optimize wd spectrum parameters\n",
    "# gave up on this method and decided to stick with eyeballing the fit. could revisit this sometime.\n",
    "\n",
    "#optimization function for field measured wind direction\n",
    "def optimize_wd_psd(x,psd,fs):    \n",
    "     \n",
    "    return np.sum(np.abs(x[0]/fs[1:] - psd[1:]))\n",
    "\n",
    "#optimization function for fixed wind direction\n",
    "def optimize_wd_fixed_psd(x,psd,fs):    \n",
    "     \n",
    "    return np.sum(np.abs(x[0]*(fs**x[1])/((1+(fs/x[2])**x[3])**((1.+x[1])/x[3])) - psd))\n",
    "\n",
    "print('======================================================================')\n",
    "print('Optimizing wd psd parameters...')\n",
    "print('======================================================================')\n",
    "\n",
    "x0          = [5.]\n",
    "bnds        = [(1., 20.)]\n",
    "\n",
    "residual_var = minimize(optimize_wd_psd,x0,args=(255964.33926245675*Pxx_avg_m5,f_m5),method='SLSQP',bounds=bnds)\n",
    "\n",
    "# %%\n",
    "wd_psd_x = residual_var.x\n",
    "print(wd_psd_x)\n",
    "\n",
    "# plt.figure()\n",
    "# plt.semilogx(f_m5, f_m5*255964.33926245675*Pxx_avg_m5)\n",
    "# plt.semilogx(f_m5, f_m5*wd_psd_x[0]/f_m5,color='r')\n",
    "\n",
    "#wd_psd: x0 = 10.817123262710673\n",
    "\n",
    "print('======================================================================')\n",
    "print('Optimizing wd fixed psd parameters...')\n",
    "print('======================================================================')\n",
    "\n",
    "#67228.832*(f**0.65)/(1+(f/0.005)**3)**(1.65/3)\n",
    "# x0          = [67228.832,0.65,0.005,3.]\n",
    "x0          = [10000.,0.65,0.008,3.]\n",
    "bnds        = ((1000., 200000.),(0.65,0.65),(0.001,0.03),(1.,5.))\n",
    "\n",
    "Pxx_avg_sowfa = Pxx_avg_sowfa[f_sowfa < 0.08]\n",
    "f_sowfa = f_sowfa[f_sowfa < 0.08]\n",
    "\n",
    "# residual_var = minimize(optimize_wd_fixed_psd,x0,args=(Pxx_avg_sowfa[1:],f_sowfa[1:]),method='SLSQP',bounds=bnds,options={'eps':np.radians(5.0)})\n",
    "residual_var = minimize(optimize_wd_fixed_psd,x0,args=(Pxx_avg_sowfa[1:],f_sowfa[1:]),method='L-BFGS-B',bounds=bnds)\n",
    "\n",
    "# %%\n",
    "wd_psd_fixed_x = residual_var.x\n",
    "print(wd_psd_fixed_x)\n",
    "\n",
    "plt.figure()\n",
    "plt.semilogx(f_sowfa, f_sowfa*Pxx_avg_sowfa)\n",
    "plt.semilogx(f_sowfa, f_sowfa*wd_psd_fixed_x[0]*(f_sowfa**wd_psd_fixed_x[1])/(1+(f_sowfa/wd_psd_fixed_x[2])**wd_psd_fixed_x[3])**((1.+wd_psd_fixed_x[1])/wd_psd_fixed_x[3]),color='r')\n",
    "\n",
    "plt.figure()\n",
    "plt.plot(f_sowfa, Pxx_avg_sowfa)\n",
    "plt.plot(f_sowfa, 10.736*wd_fixed_psd3(f_sowfa))\n",
    "# plt.loglog(f_sowfa, wd_psd_fixed_x[0]*(f_sowfa**wd_psd_fixed_x[1])/(1+(f_sowfa/wd_psd_fixed_x[2])**wd_psd_fixed_x[3])**((1.+wd_psd_fixed_x[1])/wd_psd_fixed_x[3]),color='r')\n",
    "\n",
    "#wd_fixed_psd: x0 = 1.00011323e+04, x1 = 3.32365423e-01, x2 = 5.94197717e-03, x3 = 3\n",
    "print(residual_var)\n",
    "\n",
    "# print(optimize_wd_fixed_psd(x0,Pxx_avg_sowfa[1:],f_sowfa[1:]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fh = 10.\n",
    "print(wd_psd_fixed_x[0]*(fh**wd_psd_fixed_x[1])/(1+(fh/wd_psd_fixed_x[2])**wd_psd_fixed_x[3])**((1.+wd_psd_fixed_x[1])/wd_psd_fixed_x[3]))\n",
    "\n",
    "# print(10.816660514508203/10)\n",
    "\n",
    "1/f_sowfa[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## spectra for wind speed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ws_psd(f):\n",
    "#     c = 450\n",
    "#     K = 0.036247644*(1+c)**(5/3)\n",
    "#     return K/(1+c*f)**(5/3)\n",
    "    c = 150 #350\n",
    "    alpha = 0.67\n",
    "    K = 0.036247644*(1+c)**(5/3 - alpha)\n",
    "    return (f**-alpha)*K/(1+c*f)**(5/3 - alpha)\n",
    "\n",
    "def ws_fixed_psd(f):\n",
    "    c = 200\n",
    "    K = 0.036247644*(1+c)**(5/3)\n",
    "    return K/(1+c*f)**(5/3)\n",
    "\n",
    "def ws_lowfreq_psd(f):\n",
    "    return ws_psd(f)-ws_fixed_psd(f)\n",
    "\n",
    "f_f = np.linspace(1,1801,1800)*.5/1801\n",
    "\n",
    "print(f_f[0])\n",
    "print(f_f[len(f_f)-1])\n",
    "\n",
    "print(np.sum(ws_psd(f_f)))\n",
    "print(np.sum(ws_fixed_psd(f_f)))\n",
    "\n",
    "print(np.sqrt(np.sum(ws_fixed_psd(f_f))/np.sum(ws_psd(f_f))))\n",
    "ws_fixed_comb_std_ratio = np.sqrt(np.sum(ws_fixed_psd(f_f))/np.sum(ws_psd(f_f)))\n",
    "\n",
    "# plt.figure()\n",
    "# plt.semilogx(f_f,f_f*ws_fixed_psd(f_f))\n",
    "# plt.semilogx(f_f,f_f*ws_lowfreq_psd(f_f))\n",
    "# plt.semilogx(f_f,f_f*(ws_lowfreq_psd(f_f)+ws_fixed_psd(f_f)))\n",
    "\n",
    "norm_const = 1/sum(f_f[0]*(ws_lowfreq_psd(f_f)+ws_fixed_psd(f_f)))\n",
    "\n",
    "# Plot for WES Paper\n",
    "fig = plt.figure(figsize=(2*6.4,5))\n",
    "plt.rcParams.update({'font.size': 11.054})\n",
    "fig.subplots_adjust(hspace=0.275, wspace=0.275)\n",
    "plt.subplot(121)\n",
    "plt.semilogx(f_m5[1:], f_m5[1:]*norm_const*1.3*upwr_avg*Puu_avg_m5[1:],label='Met Mast', linewidth=1.75)\n",
    "plt.semilogx(f_sowfa[1:], f_sowfa[1:]*norm_const*Puu_avg_sowfa[1:],color='#2ca02c',label='LES', linewidth=1.75)\n",
    "plt.grid()\n",
    "# f_f = np.linspace(.0001,.5,100000)\n",
    "plt.semilogx(f_f,f_f*norm_const*(ws_lowfreq_psd(f_f)+ws_fixed_psd(f_f)),'k',label='Model Fit, Combined', linewidth=2)\n",
    "#plt.plot(f_f,wd_fixed_psd(f_f),'r')\n",
    "plt.semilogx(f_f,f_f*norm_const*ws_fixed_psd(f_f),color=(0.65,0.65,0.65),label='Model Fit, Turbulent', linewidth=2)\n",
    "plt.semilogx(f_f,f_f*norm_const*ws_lowfreq_psd(f_f),'r',label='Model Fit, Low Frequency', linewidth=2)\n",
    "plt.xlim((f_f[0],0.5))\n",
    "plt.ylim((0,0.3))\n",
    "plt.xlabel('Frequency (Hz)')\n",
    "plt.ylabel('$f \\cdot S_{u}(f)$')\n",
    "plt.legend(loc='upper right')\n",
    "\n",
    "plt.subplot(122)\n",
    "# plt.figure()\n",
    "plt.loglog(f_m5[1:], norm_const*1.3*upwr_avg*Puu_avg_m5[1:],label='Met Mast', linewidth=1.75)\n",
    "plt.loglog(f_sowfa[1:], norm_const*Puu_avg_sowfa[1:],color='#2ca02c',label='LES', linewidth=1.75)\n",
    "plt.grid()\n",
    "# f_f = np.linspace(.0001,.5,100000)\n",
    "plt.loglog(f_f,norm_const*(ws_lowfreq_psd(f_f)+ws_fixed_psd(f_f)),'k',label='Model Fit, Combined', linewidth=2)\n",
    "#plt.plot(f_f,wd_fixed_psd(f_f),'r')\n",
    "plt.loglog(f_f,norm_const*ws_fixed_psd(f_f),color=(0.65,0.65,0.65),label='Model Fit, Turbulent', linewidth=2)\n",
    "plt.loglog(f_f,norm_const*ws_lowfreq_psd(f_f),'r',label='Model Fit, Low Frequency', linewidth=2)\n",
    "plt.xlim((f_f[0],0.5))\n",
    "plt.ylim((1*1e-2,1e3))\n",
    "plt.xlabel('Frequency (Hz)')\n",
    "plt.ylabel('$S_{u}(f)$')\n",
    "plt.legend(loc='lower left')\n",
    "\n",
    "print(sum(norm_const*f_f[0]*(ws_lowfreq_psd(f_f)+ws_fixed_psd(f_f))))\n",
    "\n",
    "fig.savefig('/Users/esimley/Documents/Documentation/Papers/WES_WakeSteeringUncertainty/ws_spectra.pdf', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test out stochastic wind direction time series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_len = 1*60*60\n",
    "fs = 0.5*np.array([i for i in range(1,int(ts_len/2))])/(ts_len/2)\n",
    "\n",
    "total_std = wd_std_total\n",
    "\n",
    "### Plots for WES Paper\n",
    "fig = plt.figure(figsize=(6.4,5.5))\n",
    "# fig = plt.figure(figsize=(2*3.485,2*3.485*5.5/6.4))\n",
    "# fig = plt.figure(figsize=(6.97,3.1365*5.5/6.4))\n",
    "\n",
    "for i in range(1):\n",
    "    # generate fixed wind direction time series\n",
    "    psd = wd_fixed_psd3(fs)\n",
    "    psdp5 = wd_fixed_psd3(0.5)\n",
    "    psd[0] = 0\n",
    "    psd_sum_fixed = psdp5+np.sum(psd)\n",
    "    #psd = psd/psd_sum_fixed\n",
    "    #psdp5 = psdp5/psd_sum_fixed\n",
    "    #wd_std = 3.92\n",
    "    wd_std = wd_fixed_comb_std_ratio*total_std\n",
    "\n",
    "    phase_vec = np.zeros(ts_len,dtype=complex)\n",
    "    phases = np.sqrt(psd)*np.exp(np.random.uniform(high=2*np.pi,size=int(ts_len/2)-1)*1.0j)\n",
    "    phase_vec[1:int(ts_len/2)] = phases\n",
    "    phase_vec[int(ts_len/2)] = np.sqrt(psdp5)\n",
    "    phase_vec[int(ts_len/2)+1:] = np.conj(np.flip(phases,0))\n",
    "    #phase_vec_fixed = phase_vec\n",
    "    phase_vec = (ts_len)*phase_vec/np.sqrt(np.sum(np.abs(phase_vec)**2))\n",
    "    print(np.sum(np.abs(phase_vec)))\n",
    "    wind_dir_fixed_sim = wd_std*np.real(np.fft.ifft(phase_vec))\n",
    "\n",
    "    # generate fixed wind direction time series\n",
    "    psd = wd_lowfreq_psd(fs)\n",
    "    psdp5 = 0\n",
    "    psd[0] = 0\n",
    "    #psd_sum = psdp5+np.sum(psd)\n",
    "    #psd = psd/psd_sum_fixed\n",
    "    #psdp5 = psdp5/psd_sum_fixed\n",
    "    psd[psd < 0] = 0\n",
    "    wd_std = np.sqrt(1-wd_fixed_comb_std_ratio**2)*total_std\n",
    "    \n",
    "    phase_vec = np.zeros(ts_len,dtype=complex)\n",
    "    phases = np.sqrt(psd)*np.exp(np.random.uniform(high=2*np.pi,size=int(ts_len/2)-1)*1.0j)\n",
    "    phase_vec[1:int(ts_len/2)] = phases\n",
    "    phase_vec[int(ts_len/2)] = np.sqrt(psdp5)\n",
    "    phase_vec[int(ts_len/2)+1:] = np.conj(np.flip(phases,0))\n",
    "    phase_vec = (ts_len)*phase_vec/np.sqrt(np.sum(np.abs(phase_vec)**2))\n",
    "    #phase_vec = (ts_len)*phase_vec/np.sqrt(np.sum(np.abs(phase_vec_fixed)**2))\n",
    "    print(np.sum(np.abs(phase_vec)))\n",
    "    wind_dir_lowfreq_sim = wd_std*np.real(np.fft.ifft(phase_vec))\n",
    "\n",
    "    print(np.var(wind_dir_fixed_sim)/np.var(wind_dir_lowfreq_sim))\n",
    "    \n",
    "    print(np.sum(wd_fixed_psd3(fs))/np.sum(wd_lowfreq_psd(fs)))\n",
    "#    print(np.sum(wd_fixed_psd3(fs)))\n",
    "\n",
    "    print(np.std(wind_dir_fixed_sim+wind_dir_lowfreq_sim))\n",
    "\n",
    "    plt.rcParams.update({'font.size': 12})\n",
    "    plt.subplot(211)\n",
    "    plt.plot(wind_dir_fixed_sim,label='Turbulent Wind Direction')\n",
    "    plt.grid()\n",
    "    plt.xlim((0,3600))\n",
    "    plt.ylim((-45,45))\n",
    "    plt.ylabel('Wind Direction ($^\\circ$)')\n",
    "    plt.legend(loc='upper left')\n",
    "    plt.subplot(212)\n",
    "    plt.plot(wind_dir_fixed_sim+wind_dir_lowfreq_sim,label='Combined Wind Direction')\n",
    "    plt.plot(wind_dir_lowfreq_sim,'r',label='Low Frequency Wind Direction',linewidth=2.0)\n",
    "    plt.grid()\n",
    "    plt.xlim((0,3600))\n",
    "    plt.ylim((-45,45))\n",
    "    plt.xlabel('Time (s)')\n",
    "    plt.ylabel('Wind Direction ($^\\circ$)')\n",
    "    plt.legend(loc='upper left')\n",
    "    \n",
    "print(fig.get_size_inches())\n",
    "\n",
    "fig.savefig('/Users/esimley/Documents/Documentation/Papers/WES_WakeSteeringUncertainty/wd_timeseries_example.pdf', bbox_inches='tight')\n",
    "    \n",
    "    #plt.plot(np.abs(phase_vec))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test out stochastic wind speed time series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ts_len = 1*60*60\n",
    "fs = 0.5*np.array([i for i in range(1,int(ts_len/2))])/(ts_len/2)\n",
    "\n",
    "total_std = ws_std_total\n",
    "\n",
    "var_rat = np.sum(ws_fixed_psd(fs))/np.sum(ws_lowfreq_psd(fs))\n",
    "K_low_freq = 1/(1+var_rat)\n",
    "K_fixed = var_rat*K_low_freq\n",
    "\n",
    "K_low_freq = np.sqrt(K_low_freq)\n",
    "K_fixed = np.sqrt(K_fixed)\n",
    "\n",
    "### Plots for WES Paper\n",
    "fig = plt.figure(figsize=(6.4,5.5))\n",
    "\n",
    "for i in range(1):\n",
    "    # generate fixed wind speed time series\n",
    "    psd = ws_fixed_psd(fs)\n",
    "    psdp5 = ws_fixed_psd(0.5)\n",
    "    psd[0] = 0\n",
    "    psd_sum_fixed = psdp5+np.sum(psd)\n",
    "#     ws_std = K_fixed*total_std\n",
    "    ws_std = ws_fixed_comb_std_ratio*total_std\n",
    "\n",
    "    phase_vec = np.zeros(ts_len,dtype=complex)\n",
    "    phases = np.sqrt(psd)*np.exp(np.random.uniform(high=2*np.pi,size=int(ts_len/2)-1)*1.0j)\n",
    "    phase_vec[1:int(ts_len/2)] = phases\n",
    "    phase_vec[int(ts_len/2)] = np.sqrt(psdp5)\n",
    "    phase_vec[int(ts_len/2)+1:] = np.conj(np.flip(phases,0))\n",
    "    #phase_vec_fixed = phase_vec\n",
    "    phase_vec = (ts_len)*phase_vec/np.sqrt(np.sum(np.abs(phase_vec)**2))\n",
    "    print(np.sum(np.abs(phase_vec)))\n",
    "    wind_speed_fixed_sim = ws_std*np.real(np.fft.ifft(phase_vec))\n",
    "\n",
    "    # generate low freq wind speed time series\n",
    "    psd = ws_lowfreq_psd(fs)\n",
    "    psdp5 = 0\n",
    "    psd[0] = 0\n",
    "    psd[psd < 0] = 0\n",
    "#     ws_std = K_low_freq*total_std\n",
    "    ws_std = np.sqrt(1-ws_fixed_comb_std_ratio**2)*total_std\n",
    "    \n",
    "    phase_vec = np.zeros(ts_len,dtype=complex)\n",
    "    phases = np.sqrt(psd)*np.exp(np.random.uniform(high=2*np.pi,size=int(ts_len/2)-1)*1.0j)\n",
    "    phase_vec[1:int(ts_len/2)] = phases\n",
    "    phase_vec[int(ts_len/2)] = np.sqrt(psdp5)\n",
    "    phase_vec[int(ts_len/2)+1:] = np.conj(np.flip(phases,0))\n",
    "    phase_vec = (ts_len)*phase_vec/np.sqrt(np.sum(np.abs(phase_vec)**2))\n",
    "    #phase_vec = (ts_len)*phase_vec/np.sqrt(np.sum(np.abs(phase_vec_fixed)**2))\n",
    "    print(np.sum(np.abs(phase_vec)))\n",
    "    wind_speed_lowfreq_sim = ws_std*np.real(np.fft.ifft(phase_vec))\n",
    "\n",
    "    print(np.var(wind_speed_fixed_sim)/np.var(wind_speed_lowfreq_sim))\n",
    "    \n",
    "    print(np.sum(ws_fixed_psd(fs))/np.sum(ws_lowfreq_psd(fs)))\n",
    "\n",
    "    print(np.std(wind_speed_fixed_sim+wind_speed_lowfreq_sim))\n",
    "\n",
    "    print(np.std(wind_speed_fixed_sim))\n",
    "    print(np.std(wind_speed_lowfreq_sim))\n",
    "    \n",
    "    plt.rcParams.update({'font.size': 12})\n",
    "    plt.subplot(211)\n",
    "    plt.plot(wind_speed_fixed_sim,label='Turbulent Wind Speed')\n",
    "    plt.grid()\n",
    "    plt.xlim((0,3600))\n",
    "    plt.ylim((-6,6))\n",
    "    plt.ylabel('Wind Speed (m/s)')\n",
    "    plt.legend(loc='upper left')\n",
    "    plt.subplot(212)\n",
    "    plt.plot(8+wind_speed_fixed_sim+wind_speed_lowfreq_sim,label='Combined Wind Speed')\n",
    "    plt.plot(8+wind_speed_lowfreq_sim,'r',label='Low Frequency Wind Speed',linewidth=2.0)\n",
    "    plt.grid()\n",
    "    plt.xlim((0,3600))\n",
    "    plt.ylim((8-6,8+6))\n",
    "    plt.xlabel('Time (s)')\n",
    "    plt.ylabel('Wind Speed (m/s)')\n",
    "    plt.legend(loc='upper left')\n",
    "    \n",
    "fig.savefig('/Users/esimley/Documents/Documentation/Papers/WES_WakeSteeringUncertainty/ws_timeseries_example.pdf', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "#plt.plot(np.abs(phases))\n",
    "#plt.loglog(wd_lowfreq_psd(fs))\n",
    "#plt.loglog(wd_fixed_psd3(fs))\n",
    "plt.loglog(fs,wd_psd(fs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dft = dft.resample('1S').first()\n",
    "\n",
    "plt.figure()\n",
    "#plt.plot(x['Sonic_x_119'][0][0][0])\n",
    "#plt.plot(x['Vane_WD_87m'][0][0][0])\n",
    "#plt.plot(x['Sonic_direction_100m'][0][0][0])\n",
    "plt.plot(dft.Vane_WD_87m)\n",
    "\n",
    "# convert from matlab to python\n",
    "#datetime.fromordinal(int(matlab_datenum)) + timedelta(days=matlab_datenum%1) - timedelta(days = 366)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_UTC = pd.Series(np.zeros(len(x['time_UTC'][0][0][0][0])))\n",
    "\n",
    "for i in range(len(x['time_UTC'][0][0][0][0])):\n",
    "    time_UTC[i] = pd.to_datetime(datetime.fromordinal(int(x['time_UTC'][0][0][0][0][i])) + timedelta(days=x['time_UTC'][0][0][0][0][i]%1) - timedelta(days = 366))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#'Vane_WD_87m'\n",
    "#'Sonic_direction_100m'\n",
    "datetime.fromordinal([737360,737361])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_UTC[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(x['time_UTC'][0][0][0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
